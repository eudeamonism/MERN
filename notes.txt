REACT PORTALS
Why Portal?
Because, if nested it can be lost. It should render at the top.

What do I do to index.html?
Add a new div above root, same info other than id. The name is up to me. This will be where we will portal render to.

What next?
Open component that contains what you want to render.
Store JSX content in a constant. But, you will return something different than before.

Next, import something in that component.
-Make sure you have the
--> npm i react-dom
--> import ReactDOM from 'react-dom';

ex:

function SideDrawer(props) {
	const content = <aside className="side-drawer">{props.children}</aside>;

	return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));
}

export default SideDrawer;


USEREDUCER
Key Ideas
-->const soemReducer is outside of the component function
--> - It takes(state, action)
--> -Switch case was easy

--> useReducer [RIGHT SIDE] (const someReducer, initial state)
--> [LEFT SIDE] useReducer [currentState, dispatch]

--> dispatch({ type: 'ALL CAPS', val: event.target.value})
--> we also added validators but this is difficult

REACT CUSTOM HOOKS
Key Ideas
--> House all State such as useCallback and useReducer
--> someReducer const variable lives outside of the function
--> --this receives SOME_CHANGE via if logic (action.type)
--> --which then returns info for updated useReduce state
--> export const useSomething = (X, Y)
--> --Where X and Y are parameters that are expectign default values or validators from componets that use this hook
--> for someHandler inside the function we call useCallback to avoid an infinite loop.
--> --In such hook, we call dispatch function with type that is received by const variable which parses so it can update new state.
--> return via an array the reusuable variables and functions such where the someState from useReducer and the someHandler from handler function.
